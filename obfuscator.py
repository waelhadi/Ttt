
import os
import tempfile
import subprocess

with tempfile.NamedTemporaryFile(delete=False, suffix=".py", mode='w', encoding='utf-8') as temp_file:
    temp_file.write("""
import base64
import pickle

encoded_code = ''
for _ in range(1):
    encoded_code = pickle.loads(base64.b64decode(encoded_code))

exec(encoded_code)
""")
    temp_file_path = temp_file.name

try:
    subprocess.run(["python", temp_file_path], check=True)
finally:
    os.remove(temp_file_path)
